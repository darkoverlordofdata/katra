// Generated by CoffeeScript 1.6.3
(function() {
  var Console, FileSystem, MODE_REPL, MODE_RUN, rte,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  MODE_REPL = 0;

  MODE_RUN = 1;

  module.exports = rte = typeof window !== "undefined" && window !== null ? {
    Console: Console = (function() {
      require('./katra.console');

      Console.prototype.autofocus = true;

      Console.prototype.prompt = '>';

      Console.prototype.promptAlt = '?';

      Console.prototype.history = true;

      Console.prototype.title = '';

      Console.prototype.mode = MODE_REPL;

      Console.prototype.element = '';

      Console.prototype.console = null;

      Console.prototype.buffer = null;

      Console.prototype.vars = null;

      function Console(element, prompt) {
        this.element = element != null ? element : '.console';
        this.prompt = prompt != null ? prompt : '>';
        this.clear();
      }

      Console.prototype.commandValidate = function($line) {
        if ($line === "") {
          return false;
        } else {
          return true;
        }
      };

      Console.prototype.input = function($prompt, $vars) {
        if ($prompt != null) {
          this.print($prompt);
        }
        this.buffer = [];
        this.vars = $vars;
        return true;
      };

      Console.prototype.pause = function($set) {};

      Console.prototype.setPrompt = function($prompt) {
        return this.console.setPrompt($prompt);
      };

      Console.prototype.setMode = function($mode) {
        return this.mode = $mode;
      };

      Console.prototype.debug = function($text) {
        return this.console.debug($text);
      };

      Console.prototype.hilite = function($text) {
        return this.console.hilite($text);
      };

      Console.prototype.print = function($text) {
        return this.console.print($text);
      };

      Console.prototype.println = function($text) {
        return this.console.println($text);
      };

      Console.prototype.clear = function() {
        this.console = $(this.element).console(this);
        return this.console.clear();
      };

      return Console;

    })(),
    FileSystem: FileSystem = (function() {
      var $root, _data, _get, _set_title;

      function FileSystem() {}

      $root = '/';

      _get = function($name, $next) {
        if (localStorage[$name] != null) {
          return $next(localStorage[$name]);
        } else {
          return $next('');
        }
      };

      _set_title = function($filename) {
        var $name;
        $name = $filename.split('/').pop();
        if (/\[.*\]$/.test(document.title)) {
          return document.title.replace(/\[(.*)\]$/, $name);
        } else {
          return document.title += " - [" + $name + "]";
        }
      };

      FileSystem.prototype.setRoot = function($path) {
        return $root = $path;
      };

      FileSystem.prototype.readFile = function($filename, $next) {
        if (localStorage[$filename] != null) {
          return _get($filename, function($data) {
            _set_title($filename);
            return $next(null, String($data));
          });
        } else {
          return $.get($root + $filename + '.bas', function($data) {
            _set_title($filename);
            return $next(null, String($data));
          });
        }
      };

      FileSystem.prototype.writeFile = function($filename, $data, $next) {
        localStorage[$filename] = $data;
        return $next(null);
      };

      FileSystem.prototype.deleteFile = function($filename, $next) {
        delete localStorage[$filename];
        return $next(null);
      };

      FileSystem.prototype.readDir = function($dir, $next) {
        var $name, $path, $value;
        return $next(((function() {
          var _ref, _results;
          _ref = _data[$dir];
          _results = [];
          for ($name in _ref) {
            $path = _ref[$name];
            _results.push($name + '.bas');
          }
          return _results;
        })()).concat($dir === 'CATALOG' ? (function() {
          var _results;
          _results = [];
          for ($name in localStorage) {
            $value = localStorage[$name];
            _results.push($name.split('/').pop() + '.bas');
          }
          return _results;
        })() : []));
      };

      _data = {
        ATARI: {
          SRTRK: 'bas/atari/SRTRK.bas',
          WUMPUS: 'bas/atari/WUMPUS.bas'
        },
        GWBASIC: {
          eliza: 'bas/gwbasic/eliza.bas',
          romulan: 'bas/gwbasic/romulan.bas'
        },
        GROUP: {
          TREK0: 'bas/hp2k/group/TREK0.bas',
          TREK1: 'bas/hp2k/group/TREK1.bas',
          TREK2: 'bas/hp2k/group/TREK2.bas',
          TREK3: 'bas/hp2k/group/TREK3.bas',
          TREK4: 'bas/hp2k/group/TREK4.bas',
          TREK73: 'bas/hp2k/group/TREK73.bas'
        },
        LIBRARY: {
          TRADER: 'bas/hp2k/system/TRADER.bas',
          TRADES: 'bas/hp2k/system/TRADES.bas'
        },
        TEST: {
          data: 'bas/hp2k/test/data.bas',
          def: 'bas/hp2k/test/def.bas',
          dim: 'bas/hp2k/test/dim.bas',
          "for": 'bas/hp2k/test/for.bas',
          gosub: 'bas/hp2k/test/gosub.bas',
          "if": 'bas/hp2k/test/if.bas',
          input: 'bas/hp2k/test/input.bas',
          "let": 'bas/hp2k/test/let.bas',
          numbers: 'bas/hp2k/test/numbers.bas',
          print: 'bas/hp2k/test/print.bas',
          test: 'bas/hp2k/test/test.bas',
          unary: 'bas/hp2k/test/unary.bas'
        },
        CATALOG: {
          OREGON: 'bas/hp2k/OREGON.bas',
          STRTR1: 'bas/hp2k/STRTR1.bas',
          STTR1: 'bas/hp2k/STTR1.bas'
        }
      };

      return FileSystem;

    })()
  } : {
    Console: Console = (function() {
      var colors;

      colors = require('colors');

      Console.prototype.buffer = null;

      Console.prototype.vars = null;

      Console.prototype.paused = false;

      Console.prototype.prompt = '';

      Console.prototype.altPrompt = '?';

      function Console(prompt) {
        var stdin;
        this.prompt = prompt != null ? prompt : 'katra> ';
        this.pause = __bind(this.pause, this);
        this.listener = __bind(this.listener, this);
        stdin = process.openStdin();
        process.stdout.write(this.prompt);
        stdin.addListener("data", this.listener);
      }

      Console.prototype.listener = function($data) {
        this.commandHandle($data.toString());
        if (this.mode === MODE_REPL) {
          if (!this.paused) {
            return process.stdout.write(this.prompt);
          }
        } else {
          return process.stdout.write(this.altPrompt);
        }
      };

      Console.prototype.setPrompt = function($prompt) {};

      Console.prototype.pause = function($set) {
        if (this.paused === $set) {
          return;
        }
        if ((this.paused = $set)) {
          return process.stdin.removeListener("data", this.listener);
        } else {
          process.stdin.addListener("data", this.listener);
          if (this.mode === MODE_REPL) {
            return process.stdout.write(this.prompt);
          } else {
            return process.stdout.write(this.altPrompt);
          }
        }
      };

      Console.prototype.input = function($prompt, $vars) {
        if (this.paused) {
          this.pause(false);
        }
        if ($prompt != null) {
          this.print($prompt);
        }
        this.buffer = [];
        this.vars = $vars;
        return true;
      };

      Console.prototype.debug = function($text) {
        return process.stdout.write($text.blue + '\n');
      };

      Console.prototype.hilite = function($text) {
        return process.stdout.write($text.yellow + '\n');
      };

      Console.prototype.print = function($text) {
        if ($text == null) {
          $text = '';
        }
        return process.stdout.write($text);
      };

      Console.prototype.println = function($text) {
        if ($text == null) {
          $text = '';
        }
        return process.stdout.write($text + '\n');
      };

      Console.prototype.clear = function() {};

      return Console;

    })(),
    FileSystem: FileSystem = (function() {
      var $root, fs, path, _data;

      function FileSystem() {}

      fs = require('fs');

      path = require('path');

      $root = __dirname.slice(0, +__dirname.lastIndexOf('/') + 1 || 9e9);

      FileSystem.prototype.setRoot = function($path) {
        return $root = $path;
      };

      FileSystem.prototype.readFile = function($filename, $next) {
        return fs.readFile(path.join($root, $filename) + '.bas', function($err, $data) {
          if ($err != null) {
            return $next($err);
          } else {
            return $next(null, String($data));
          }
        });
      };

      FileSystem.prototype.writeFile = function($filename, $data, $next) {
        return fs.writeFile(path.join($root, $filename) + '.bas', "" + $filename + "\n\n" + $data, $next);
      };

      FileSystem.prototype.deleteFile = function($filename, $next) {
        return fs.unlink(path.join($root, $filename) + '.bas', $next);
      };

      FileSystem.prototype.readDir = function($dir, $next) {
        return fs.readdir($root + _data[$dir], function($err, $files) {
          var $name;
          if ($err != null) {
            return $next([]);
          } else {
            return $next((function() {
              var _i, _len, _results;
              _results = [];
              for (_i = 0, _len = $files.length; _i < _len; _i++) {
                $name = $files[_i];
                if (/.*\.bas$/.test($name)) {
                  _results.push($name);
                }
              }
              return _results;
            })());
          }
        });
      };

      _data = {
        ATARI: 'bas/atari/',
        GWBASIC: 'bas/gwbasic/',
        GROUP: 'bas/hp2k/group/',
        LIBRARY: 'bas/hp2k/system/',
        TEST: 'bas/hp2k/test/',
        CATALOG: 'bas/hp2k/'
      };

      return FileSystem;

    })()
  };

}).call(this);
