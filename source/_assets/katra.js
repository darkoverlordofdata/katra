// Generated by CoffeeScript 1.6.3
(function() {
  var ABS, AND, ATN, Add, Base, BuiltIn, COS, Chain, Com, Comma, Con, Console, Const, Data, Def, Dim, Div, EQ, EXP, End, Enter, FN, FOR, For, GE, GOSUB, GT, Gosub, Goto, INT, If, Image, Input, Keyword, LCASE, LE, LEFT, LEN, LIN, LOG, LT, Let, MID, MODE_REPL, MODE_RUN, Mat, MatRead, Max, Min, Mul, NE, NOT, Next, OR, Operator, PHASE_EXEC, PHASE_SCAN, Pow, Print, RIGHT, RND, Randomize, Read, Rem, Restore, Return, SGN, SIN, SPA, SQR, SUBSTR, Semic, Statement, Stop, Sub, TAB, TAN, TIM, UCASE, Using, V_ATARI, V_GWBASIC, V_HP2000, Var, Zer, arrays, benchmark, benchmarks, chain, common, data, dim, dp, elapsedTime, eop, execute, fixupIf, fixupPrint, format, functions, gw, initialize, katra, load, name, offset, parse, pc, prog, qualifyFilename, raw, rte, run, save, stack, start, strings, text, title, trace, type, util, valueOf, variables, xrf, _con, _fs, _ref, _ref1, _ref10, _ref11, _ref12, _ref13, _ref14, _ref15, _ref16, _ref17, _ref18, _ref19, _ref2, _ref20, _ref21, _ref22, _ref23, _ref24, _ref25, _ref26, _ref27, _ref28, _ref29, _ref3, _ref30, _ref31, _ref32, _ref33, _ref34, _ref35, _ref36, _ref37, _ref38, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  util = typeof window !== "undefined" && window !== null ? window.util : require("./util");

  rte = typeof window !== "undefined" && window !== null ? window.rte : require("./rte.node");

  V_HP2000 = 0;

  V_ATARI = 1;

  V_GWBASIC = 2;

  GOSUB = 1;

  FOR = 2;

  PHASE_SCAN = 0;

  PHASE_EXEC = 1;

  MODE_REPL = 0;

  MODE_RUN = 1;

  _con = null;

  _fs = null;

  arrays = {};

  benchmarks = {};

  common = [];

  data = [];

  trace = false;

  dp = 0;

  eop = false;

  functions = {};

  gw = false;

  name = '';

  offset = 0;

  pc = 0;

  prog = [];

  raw = {};

  stack = [];

  strings = {};

  text = '';

  type = 0;

  title = '';

  variables = {};

  xrf = {};

  Console = (function(_super) {
    __extends(Console, _super);

    Console.prototype.mode = MODE_REPL;

    Console.prototype.exec = true;

    function Console($title) {
      this.commandHandle = __bind(this.commandHandle, this);
      this.title = $title;
      Console.__super__.constructor.call(this);
    }

    Console.prototype.cancelHandle = function() {
      eop = true;
      con.print('^C');
      con.setPrompt(false);
      return run();
    };

    Console.prototype.commandHandle = function($line) {
      var $item, $ix, $name, _i, _j, _len, _len1, _ref, _ref1;
      switch (this.mode) {
        case MODE_RUN:
          _ref = $line.trim().split(",");
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            $item = _ref[_i];
            this.buffer.push(isNaN($item) ? String($item) : Number($item));
          }
          if (this.buffer.length < this.vars.length) {
            this.continuedPrompt = true;
          } else {
            _ref1 = this.vars;
            for ($ix = _j = 0, _len1 = _ref1.length; _j < _len1; $ix = ++_j) {
              $name = _ref1[$ix];
              if (/\$$/.test($name)) {
                strings[$name] = this.buffer[$ix];
              } else {
                variables[$name] = this.buffer[$ix];
              }
            }
            this.continuedPrompt = false;
            run();
            return true;
          }
          break;
        case MODE_REPL:
          $line = /\n$/.test($line) ? $line : "" + $line + "\n";
          return parse($line);
      }
    };

    return Console;

  })(rte.Console);

  (function() {
    return Object.defineProperties(this, {
      con: {
        get: function() {
          if (_con == null) {
            return _con = new Console(title);
          } else {
            return _con;
          }
        }
      },
      fs: {
        get: function() {
          if (_fs == null) {
            return _fs = new rte.FileSystem();
          } else {
            return _fs;
          }
        }
      }
    });
  })();

  initialize = function($all) {
    arrays = {};
    common = [];
    data = [];
    dp = 0;
    eop = false;
    functions = {};
    benchmarks = {};
    offset = 0;
    pc = 0;
    if ($all) {
      raw = {};
    }
    stack = [];
    strings = {};
    variables = {};
    return xrf = {};
  };

  valueOf = function($value) {
    if ($value["eval"] != null) {
      return $value["eval"]();
    } else {
      return $value;
    }
  };

  qualifyFilename = function($name, $version) {
    if ($version == null) {
      $version = V_HP2000;
    }
    switch ($version) {
      case V_ATARI:
        return 'bas/atari/' + $name;
      case V_GWBASIC:
        return 'bas/gwbasic/' + $name;
      case V_HP2000:
        switch ($name[0]) {
          case "*":
            return 'bas/hp2k/group/' + $name.slice(1);
          case "$":
            return 'bas/hp2k/system/' + $name.slice(1);
          case "#":
            return 'bas/hp2k/test/' + $name.slice(1);
          default:
            return 'bas/hp2k/' + $name;
        }
    }
  };

  save = function($version, $name, $data, $next) {
    $name = $name[0] === '"' ? $name.slice(1, -1) : $name;
    con.pause(true);
    fs.writeFile(qualifyFilename($name, $version), $data, function() {
      if (typeof $next === "function") {
        $next();
      }
      return con.pause(false);
    });
    return true;
  };

  load = function($version, $name, $init, $next) {
    if ($init == null) {
      $init = true;
    }
    $name = $name[0] === '"' ? $name.slice(1, -1) : $name;
    initialize($init);
    con.pause(true);
    fs.readFile(qualifyFilename($name, $version), function($err, $data) {
      if ($err != null) {
        con.println($err);
      } else {
        $data = util.clean($data).split('\n');
        if (isNaN($data[0][0])) {
          $data.shift();
        }
        if ($data[0] === "") {
          $data.shift();
        }
        name = /^[A-Za-z]/.test($name) ? $name : $name.slice(1);
        type = $version;
        gw = type === V_GWBASIC ? true : false;
        text = $data.join('\n');
        if (typeof $next === "function") {
          $next(text);
        }
        parse(text);
      }
      return con.pause(false);
    });
    return true;
  };

  execute = function($version, $name, $init) {
    if ($init == null) {
      $init = true;
    }
    initialize($init);
    con.pause(true);
    fs.readFile(qualifyFilename($name, $version), function($err, $data) {
      if ($err != null) {
        con.println($err);
      } else {
        $data = util.clean($data).split('\n');
        if (isNaN($data[0][0])) {
          $data.shift();
        }
        if ($data[0] === "") {
          $data.shift();
        }
        name = /^[A-Za-z]/.test($name) ? $name : $name.slice(1);
        type = $version;
        gw = type === V_GWBASIC ? true : false;
        text = $data.join('\n');
        parse(text);
        start();
        run();
      }
      return con.pause(false);
    });
    return true;
  };

  start = function() {
    var $lineno, $statement, _i, _len, _ref;
    prog = [];
    for ($lineno in raw) {
      $statement = raw[$lineno];
      while ($lineno.length < 4) {
        $lineno = '0' + $lineno;
      }
      prog.push([$lineno, $statement]);
    }
    prog.sort();
    initialize(false);
    for (_i = 0, _len = prog.length; _i < _len; _i++) {
      _ref = prog[_i], $lineno = _ref[0], $statement = _ref[1];
      if ($statement.code.type === PHASE_SCAN) {
        $statement.code["eval"]();
      }
      xrf[parseInt($lineno, 10)] = pc++;
    }
    return pc = 0;
  };

  run = function() {
    var $code, $e, $lineno, $statement, $wait, _ref;
    $wait = false;
    con.setMode(MODE_RUN);
    try {
      while (!(eop || $wait)) {
        _ref = prog[pc++], $lineno = _ref[0], $statement = _ref[1];
        $code = $statement.code;
        if ($statement.code.type === PHASE_EXEC) {
          if (trace) {
            con.debug($lineno + ' ' + $code.toString());
          }
          $wait = $code["eval"]();
        }
        con.setPrompt($wait);
        if (pc >= prog.length) {
          eop = true;
        }
      }
    } catch (_error) {
      $e = _error;
      con.println($e);
      $wait = false;
    }
    if (!$wait) {
      con.setMode(MODE_REPL);
      return con.println('DONE');
    }
  };

  chain = function($code) {
    var $ix, $save, $var, _i, _j, _len, _len1;
    $save = Array(common.length);
    for ($ix = _i = 0, _len = common.length; _i < _len; $ix = ++_i) {
      $var = common[$ix];
      switch ($var.type) {
        case 0:
          $save[$ix] = strings[$var.name];
          break;
        case 1:
          $save[$ix] = variables[$var.name];
          break;
        case 2:
          $save[$ix] = arrays[$var.name];
      }
    }
    initialize(true);
    parse($code);
    start();
    for ($ix = _j = 0, _len1 = common.length; _j < _len1; $ix = ++_j) {
      $var = common[$ix];
      switch ($var.type) {
        case 0:
          strings[$var.name] = $save[$ix];
          break;
        case 1:
          variables[$var.name] = $save[$ix];
          break;
        case 2:
          arrays[$var.name] = $save[$ix];
      }
    }
    return run();
  };

  parse = function($code) {
    var $e, $index, $line, kc, _i, _len;
    kc = typeof window !== "undefined" && window !== null ? window.kc : require("./kc");
    $code = $code.split('\n');
    for ($index = _i = 0, _len = $code.length; _i < _len; $index = ++_i) {
      $line = $code[$index];
      if (/^\d*\s*IF/i.test($line)) {
        $code[$index] = $line = fixupIf($line);
      }
      if (/^\d*\s*PRINT/i.test($line)) {
        $code[$index] = $line = fixupPrint($line);
      }
      if (/\'(?=[^"]*(?:"[^"]*"[^"]*)*$)/.test($line)) {
        $code[$index] = $line = $line.replace(/(\'.*(?=[^"]*(?:"[^"]*"[^"]*)*$))/g, "");
      }
      if (/\*\*(?=[^"]*(?:"[^"]*"[^"]*)*$)/.test($line)) {
        $code[$index] = $line = $line.replace(/(\*\*(?=[^"]*(?:"[^"]*"[^"]*)*$))/g, "^");
      }
    }
    try {
      kc.parse($code.join('\n'));
    } catch (_error) {
      $e = _error;
      con.debug(String($e));
    }
    return true;
  };

  fixupIf = function($line) {
    $line = $line.split(/THEN/i);
    $line[0] = $line[0].replace(/\=/g, '==').replace(/\<\=\=/g, '<=').replace(/\>\=\=/g, '>=').replace(/\#/g, '<>');
    return $line.join(" THEN ");
  };

  fixupPrint = function($line) {
    var $chunk, $index, $is_string, $match, $sep, SEP, _i, _len, _ref, _ref1;
    SEP = ';:,';
    $is_string = false;
    $match = (function() {
      var _i, _len, _ref, _results;
      _ref = $line.match(/[^"]*(?!\\"[^"]*\")/g);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        $chunk = _ref[_i];
        if ($chunk !== '') {
          _results.push($chunk);
        }
      }
      return _results;
    })();
    for ($index = _i = 0, _len = $match.length; _i < _len; $index = ++_i) {
      $chunk = $match[$index];
      $sep = /^\d*\s*PRINT\s*$/i.test($chunk) || $index === $match.length - 1 ? '' : ';';
      if ($is_string) {
        $match[$index] = $chunk = '"' + $chunk + '"';
        if (SEP.indexOf((_ref = (_ref1 = $match[$index + 1]) != null ? _ref1[0] : void 0) != null ? _ref : '') === -1) {
          $match[$index] = $chunk + $sep;
        }
      } else {
        if (SEP.indexOf($chunk.substr(-1)) === -1) {
          $match[$index] = $chunk + $sep;
        }
      }
      $is_string = !$is_string;
    }
    return $match.join('');
  };

  dim = function($init, $dim1, $dim2) {
    var $a, $i, $j, _i, _j, _k, _ref, _ref1, _ref2;
    $a = [];
    switch (arguments.length) {
      case 2:
        for ($i = _i = offset, _ref = $dim1 + 1; offset <= _ref ? _i < _ref : _i > _ref; $i = offset <= _ref ? ++_i : --_i) {
          $a[$i] = $init;
        }
        break;
      case 3:
        for ($i = _j = offset, _ref1 = $dim1 + 1; offset <= _ref1 ? _j < _ref1 : _j > _ref1; $i = offset <= _ref1 ? ++_j : --_j) {
          $a[$i] = [];
          for ($j = _k = offset, _ref2 = $dim2 + 1; offset <= _ref2 ? _k < _ref2 : _k > _ref2; $j = offset <= _ref2 ? ++_k : --_k) {
            $a[$i][$j] = $init;
          }
        }
    }
    return $a;
  };

  format = function($image) {
    var $count, $head, $out;
    if ($image == null) {
      $image = [];
    }
    $out = '';
    $count = 1;
    while ($image.length > 0) {
      $head = $image.shift();
      if (isNaN($head)) {
        switch ($head) {
          case ',':
            $count = 1;
            break;
          case 'D':
            $out += $count > 1 ? '%' + $count + 'd' : '%d';
            $count = 1;
            break;
          case 'A':
            $out += $count > 1 ? '%' + $count + 's' : '%s';
            $count = 1;
            break;
          case 'X':
            $out += Array($count + 1).join(' ');
            $count = 1;
            break;
          case '(':
            $out += Array($count + 1).join(format($image));
            $count = 1;
            break;
          case ')':
            return $out;
          default:
            $out += $head.slice(1, -1);
            $count = 1;
        }
      } else {
        $count = $head;
      }
    }
    return $out;
  };

  benchmark = function($name) {
    return benchmarks[$name] = new Date();
  };

  elapsedTime = function($point1, $point2) {
    if (benchmarks[$point1] == null) {
      return 0;
    }
    if (benchmarks[$point2] == null) {
      benchmarks[$point2] = new Date();
    }
    return benchmarks[$point2] - benchmarks[$point1];
  };

  Zer = {
    "eval": function() {
      return 0;
    },
    toString: function() {
      return 'ZER';
    }
  };

  Con = {
    "eval": function() {
      return 1;
    },
    toString: function() {
      return 'CON';
    }
  };

  Semic = {
    "eval": function() {
      return '';
    },
    toString: function() {
      return ';';
    }
  };

  Comma = {
    "eval": function() {
      return '    ';
    },
    toString: function() {
      return ',';
    }
  };

  Operator = (function() {
    function Operator(left, right) {
      this.left = left;
      this.right = right;
    }

    return Operator;

  })();

  BuiltIn = (function() {
    function BuiltIn($0, $1, $2) {
      this.$0 = $0;
      this.$1 = $1;
      this.$2 = $2;
    }

    BuiltIn.prototype.toString = function() {
      return "" + (this.constructor.name.toUpperCase()) + "(" + this.$0 + ")";
    };

    return BuiltIn;

  })();

  Keyword = (function() {
    function Keyword() {}

    Keyword.prototype.type = PHASE_EXEC;

    Keyword.prototype["eval"] = function() {
      return false;
    };

    return Keyword;

  })();

  katra = {
    main: function($args) {
      var _ref;
      title = (_ref = $args.title) != null ? _ref : title;
      switch ($args.basic) {
        case 'atari':
          return execute(V_ATARI, $args.program);
        case 'gwbasic':
          return execute(V_GWBASIC, $args.program);
        case 'hp2k':
          return execute(V_HP2000, $args.program);
        default:
          return con.setMode(MODE_REPL);
      }
    },
    setRoot: function($root) {
      return fs.setRoot($root);
    },
    getText: function() {
      return text;
    },
    command: {
      append: function($0) {
        return load(V_HP2000, $0.split('-')[1], false);
      },
      atari: function($0, $next) {
        return load(V_ATARI, $0, true, $next);
      },
      cat: function($dir) {
        var $cw, $hdr, $nc;
        $nc = 4;
        $cw = 20;
        $hdr = 'name                ';
        return fs.readDir($dir, function($files) {
          var $col, $file, _i, _len;
          $col = 0;
          con.hilite("\n" + $dir + "\n" + (Array($nc + 1).join($hdr)));
          for (_i = 0, _len = $files.length; _i < _len; _i++) {
            $file = $files[_i];
            $file = $file.split('.')[0];
            while ($file.length < $cw) {
              $file += " ";
            }
            con.print($file);
            if (($col++) % $nc === $nc - 1) {
              con.println();
            }
          }
          if (typeof window === "undefined" || window === null) {
            return con.print("\n" + con.prompt);
          }
        });
      },
      cls: function() {
        return con.clear();
      },
      del: function($0) {
        var $end, $lineno, $start, _i, _ref, _results;
        _ref = $0.split('-')[1].split(','), $start = _ref[0], $end = _ref[1];
        if (!$end) {
          $end = $start;
        }
        _results = [];
        for ($lineno = _i = $start; $start <= $end ? _i < $end : _i > $end; $lineno = $start <= $end ? ++_i : --_i) {
          if (raw[$lineno] != null) {
            _results.push(delete raw[$lineno]);
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      },
      dir: function($0) {},
      exec: function($0) {
        return execute(V_HP2000, $0.split('-')[1]);
      },
      files: function($0) {},
      get: function($0, $next) {
        return load(V_HP2000, $0.split('-')[1], true, $next);
      },
      gwbasic: function($0, $next) {
        return load(V_GWBASIC, $0, true, $next);
      },
      list: function($0) {
        var $1, $code, $end, $lineno, $lines, $start, $statement, _i, _len, _ref, _ref1, _results;
        $1 = $0.split('-')[1];
        if ($1 != null) {
          _ref = $1.split(','), $start = _ref[0], $end = _ref[1];
        }
        if ($start != null) {
          $end = $end != null ? $end : $start;
          $start = parseInt($start, 10);
          $end = parseInt($end, 10);
        } else {
          $start = 1;
          $end = 9999;
        }
        $lines = [];
        for ($lineno in raw) {
          $statement = raw[$lineno];
          while ($lineno.length < 5) {
            $lineno = '0' + $lineno;
          }
          $lines.push([$lineno, $statement]);
        }
        $lines.sort();
        _results = [];
        for (_i = 0, _len = $lines.length; _i < _len; _i++) {
          _ref1 = $lines[_i], $lineno = _ref1[0], $statement = _ref1[1];
          $lineno = parseInt($statement.lineno, 10);
          $code = $statement.code;
          if ($start != null) {
            if ($lineno >= parseInt($start, 10) && $lineno <= parseInt($end, 10)) {
              _results.push(con.println($lineno + ' ' + $code));
            } else {
              _results.push(void 0);
            }
          } else {
            _results.push(con.println($lineno + ' ' + $code));
          }
        }
        return _results;
      },
      name: function($0) {
        return name = $0.split('-')[1];
      },
      purge: function($0) {
        return fs.deleteFile(qualifyFilename($0.split('-')[1], type), function($err) {
          if ($err != null) {
            return con.println($err);
          }
        });
      },
      quit: function() {
        return typeof process !== "undefined" && process !== null ? process.exit() : void 0;
      },
      renum: function($0) {
        return con.println("Renumber Not Implemented");
      },
      run: function($0) {
        if (Object.keys(raw).length > 0) {
          start();
          return run();
        }
      },
      save: function() {
        var $code, $lineno, $lines, $statement, $text, _i, _len, _ref;
        if (name === '') {
          return con.println("Name not set");
        }
        $lines = [];
        $text = '';
        for ($lineno in raw) {
          $statement = raw[$lineno];
          $lines.push([$lineno, $statement.code]);
        }
        $lines.sort();
        for (_i = 0, _len = $lines.length; _i < _len; _i++) {
          _ref = $lines[_i], $lineno = _ref[0], $code = _ref[1];
          $text += $lineno + ' ' + $code + '\n';
        }
        return save(type, name, $text.slice(0, -1), function($err) {
          if ($err != null) {
            return con.println($err);
          }
        });
      },
      scr: function() {
        return initialize(true);
      },
      troff: function() {
        return trace = false;
      },
      tron: function() {
        return trace = true;
      }
    },
    keyword: {
      Zer: Zer,
      Con: Con,
      Semic: Semic,
      Comma: Comma,
      Statement: Statement = (function() {
        function Statement($code, $lineno) {
          if ($lineno != null) {
            raw[$lineno] = {
              lineno: $lineno,
              code: $code
            };
          } else {
            if ($code != null) {
              if (typeof $code["eval"] === "function") {
                $code["eval"]();
              }
            }
          }
        }

        return Statement;

      })(),
      Const: Const = (function() {
        function Const(value) {
          this.value = value;
          this.is_string = 'string' === typeof this.value ? true : false;
          if (this.is_string) {
            if (this.value.charAt(0) === '"') {
              this.value = this.value.slice(1, -1);
            }
          }
        }

        Const.prototype.value = function() {
          return this.value;
        };

        Const.prototype["eval"] = function() {
          return this.value;
        };

        Const.prototype.toString = function() {
          if (this.is_string) {
            return "\"" + this.value + "\"";
          } else {
            return "" + this.value;
          }
        };

        return Const;

      })(),
      Var: Var = (function() {
        function Var(name, $delim, $dims) {
          this.name = name;
          this.is_string = /\$$/.test(this.name);
          if ($delim != null) {
            this.is_array = true;
            this.dims = util.flatten($dims);
            this.dim1 = this.dims[0];
            this.dim2 = this.dims[1];
          } else {
            this.is_array = false;
          }
        }

        Var.prototype["let"] = function($value) {
          var $dim1, $dim2, $end, $len, $start, $str;
          if (this.is_string) {
            if (gw) {
              if (this.dim2 != null) {
                $dim1 = this.dim1["eval"]();
                $dim2 = this.dim2["eval"]();
                return strings[this.name][$dim1][$dim2] = $value;
              } else if (this.dim1 != null) {
                $dim1 = this.dim1["eval"]();
                return strings[this.name][$dim1] = $value;
              } else {
                return strings[this.name] = $value;
              }
            } else {
              if (this.dim2 != null) {
                $start = this.dim1["eval"]() - 1;
                $end = this.dim2["eval"]();
                if ($end < $start) {
                  throw 'Invalid String index: ' + this.toString();
                }
                $len = $end - $start;
                $value = $value.substr(0, $len);
                $value = util.pad($value, $len);
                $str = strings[this.name];
                return strings[this.name] = $str.substr(0, $start) + $value + $str.substr($end);
              } else if (this.dim1 != null) {
                $start = this.dim1["eval"]() - 1;
                $str = strings[this.name];
                return strings[this.name] = $str.substr(0, $start) + $value + $str.substr($start + $value.length);
              } else {
                $len = strings[this.name].length;
                if ($value.length < $len) {
                  $value += Array($len - $value.length + 1).join(' ');
                }
                return strings[this.name] = $value;
              }
            }
          } else if (this.dim2 != null) {
            $dim1 = this.dim1["eval"]();
            $dim2 = this.dim2["eval"]();
            return arrays[this.name][$dim1][$dim2] = $value;
          } else if (this.dim1 != null) {
            $dim1 = this.dim1["eval"]();
            return arrays[this.name][$dim1] = $value;
          } else {
            return variables[this.name] = $value;
          }
        };

        Var.prototype["eval"] = function() {
          var $dim1, $dim2, $end, $start, _ref, _ref1, _ref10, _ref11, _ref12, _ref13, _ref14, _ref15, _ref16, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
          if (this.is_string) {
            if (gw) {
              if (this.dim2 != null) {
                $dim1 = this.dim1["eval"]();
                $dim2 = this.dim2["eval"]();
                return (_ref = (_ref1 = strings[this.name]) != null ? (_ref2 = _ref1[$dim1]) != null ? _ref2[$dim2] : void 0 : void 0) != null ? _ref : '';
              } else if (this.dim1 != null) {
                $dim1 = this.dim1["eval"]();
                return (_ref3 = (_ref4 = strings[this.name]) != null ? _ref4[$dim1] : void 0) != null ? _ref3 : '';
              } else {
                return (_ref5 = strings[this.name]) != null ? _ref5 : '';
              }
            } else {
              if (this.dim2 != null) {
                $start = this.dim1["eval"]() - 1;
                $end = this.dim2["eval"]();
                if ($end < $start) {
                  throw 'Invalid String index: ' + this.toString();
                }
                return (_ref6 = (_ref7 = strings[this.name]) != null ? _ref7.slice($start, $end) : void 0) != null ? _ref6 : '';
              } else if (this.dim1 != null) {
                $start = this.dim1["eval"]() - 1;
                return (_ref8 = (_ref9 = strings[this.name]) != null ? _ref9.slice($start) : void 0) != null ? _ref8 : '';
              } else {
                return (_ref10 = strings[this.name]) != null ? _ref10 : '';
              }
            }
          } else if (this.dim2 != null) {
            $dim1 = this.dim1["eval"]();
            $dim2 = this.dim2["eval"]();
            return (_ref11 = (_ref12 = arrays[this.name]) != null ? (_ref13 = _ref12[$dim1]) != null ? _ref13[$dim2] : void 0 : void 0) != null ? _ref11 : 0;
          } else if (this.dim1 != null) {
            $dim1 = this.dim1["eval"]();
            return (_ref14 = (_ref15 = arrays[this.name]) != null ? _ref15[$dim1] : void 0) != null ? _ref14 : 0;
          } else {
            return (_ref16 = variables[this.name]) != null ? _ref16 : 0;
          }
        };

        Var.prototype.toString = function() {
          if (this.is_array) {
            return "" + this.name + "[" + (this.dims.join(',')) + "]";
          } else {
            return this.name;
          }
        };

        return Var;

      })(),
      Base: Base = (function(_super) {
        __extends(Base, _super);

        function Base(base) {
          this.base = base;
        }

        Base.prototype["eval"] = function() {
          offset = this.base;
          return false;
        };

        Base.prototype.toString = function() {
          return "BASE " + this.base;
        };

        return Base;

      })(Keyword),
      Chain: Chain = (function(_super) {
        __extends(Chain, _super);

        function Chain(program) {
          this.program = program;
        }

        Chain.prototype["eval"] = function() {
          con.pause(true);
          return fs.readFile(this.program, function($err, $data) {
            if ($err != null) {
              con.println($err);
            } else {
              type = $data.type;
              name = $data.name;
              gw = type === V_GWBASIC ? true : false;
              chain($data.data);
            }
            return con.pause(false);
          });
        };

        Chain.prototype.toString = function() {
          return "CHAIN \"" + this.program + "\"";
        };

        return Chain;

      })(Keyword),
      Com: Com = (function(_super) {
        __extends(Com, _super);

        Com.prototype.type = PHASE_SCAN;

        function Com($vars) {
          this.vars = util.flatten($vars);
        }

        Com.prototype["eval"] = function() {
          var $var, _i, _len, _ref;
          _ref = this.vars;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            $var = _ref[_i];
            if (/\$$/.test($var.name)) {
              if (gw) {
                if ($var.dims.length === 0) {
                  strings[$var.name] = '';
                } else {
                  strings[$var.name] = dim.apply(null, [''].concat(__slice.call($var.dims)));
                }
              } else {
                strings[$var.name] = Array($var.dims[0] + 1).join(' ');
                common.push({
                  type: 0,
                  name: $var.name
                });
              }
            } else {
              if ($var.dims.length === 0) {
                variables[$var.name] = 0;
                common.push({
                  type: 1,
                  name: $var.name
                });
              } else {
                arrays[$var.name] = dim.apply(null, [0].concat(__slice.call($var.dims)));
                common.push({
                  type: 2,
                  name: $var.name
                });
              }
            }
          }
          return false;
        };

        Com.prototype.toString = function() {
          return "COM " + (this.vars.join(', '));
        };

        return Com;

      })(Keyword),
      Data: Data = (function(_super) {
        __extends(Data, _super);

        Data.prototype.type = PHASE_SCAN;

        function Data($data) {
          this.data = util.flatten($data);
        }

        Data.prototype["eval"] = function() {
          if (data === null) {
            data = [];
          }
          data = data.concat(this.data);
          return false;
        };

        Data.prototype.toString = function() {
          return "DATA " + (this.data.join(', '));
        };

        return Data;

      })(Keyword),
      Def: Def = (function(_super) {
        __extends(Def, _super);

        Def.prototype.type = PHASE_SCAN;

        function Def(name, par, body) {
          this.name = name;
          this.par = par;
          this.body = body;
        }

        Def.prototype["eval"] = function() {
          var _this = this;
          functions[this.name] = function($par) {
            var $ret, $tmp;
            $tmp = variables[_this.par];
            variables[_this.par] = $par;
            $ret = _this.body["eval"]();
            variables[_this.par] = $tmp;
            return $ret;
          };
          return false;
        };

        Def.prototype.toString = function() {
          return "DEF " + this.name + "(" + this.par + ") = " + this.body;
        };

        return Def;

      })(Keyword),
      Dim: Dim = (function(_super) {
        __extends(Dim, _super);

        Dim.prototype.type = PHASE_SCAN;

        function Dim($vars) {
          this.vars = util.flatten($vars);
        }

        Dim.prototype["eval"] = function() {
          var $var, _i, _len, _ref;
          _ref = this.vars;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            $var = _ref[_i];
            if (/\$$/.test($var.name)) {
              if (gw) {
                if ($var.dims.length === 0) {
                  strings[$var.name] = '';
                } else {
                  strings[$var.name] = dim.apply(null, [''].concat(__slice.call($var.dims)));
                }
              } else {
                strings[$var.name] = Array($var.dims[0] + 1).join(' ');
              }
            } else {
              if ($var.dims.length === 0) {
                variables[$var.name] = 0;
              } else {
                arrays[$var.name] = dim.apply(null, [0].concat(__slice.call($var.dims)));
              }
            }
          }
          return false;
        };

        Dim.prototype.toString = function() {
          return "DIM " + (this.vars.join(', '));
        };

        return Dim;

      })(Keyword),
      End: End = (function(_super) {
        __extends(End, _super);

        function End() {
          _ref = End.__super__.constructor.apply(this, arguments);
          return _ref;
        }

        End.prototype["eval"] = function() {
          eop = true;
          return false;
        };

        End.prototype.toString = function() {
          return "END";
        };

        return End;

      })(Keyword),
      Enter: Enter = (function(_super) {
        __extends(Enter, _super);

        function Enter(port, time, status, _var) {
          var _ref1;
          this.port = port;
          this.time = time;
          this.status = status;
          this["var"] = _var;
          if (this["var"] == null) {
            _ref1 = [null, this.port, this.time, this.status], this.port = _ref1[0], this.time = _ref1[1], this.status = _ref1[2], this["var"] = _ref1[3];
          }
        }

        Enter.prototype["eval"] = function() {
          con.input('', [this["var"]]);
          return true;
        };

        Enter.prototype.toString = function() {
          return "ENTER " + this.port + ", " + this.time + ", " + this.status + ", " + this["var"];
        };

        return Enter;

      })(Keyword),
      For: For = (function(_super) {
        __extends(For, _super);

        function For(_var, start, end, step) {
          this["var"] = _var;
          this.start = start;
          this.end = end;
          this.step = step != null ? step : new Const(1);
        }

        For.prototype["eval"] = function() {
          variables[this["var"]] = valueOf(this.start);
          stack.push({
            id: FOR,
            pc: pc,
            name: this["var"],
            end: this.end,
            step: this.step
          });
          return false;
        };

        For.prototype.toString = function() {
          if (this.step === 1) {
            return "FOR " + this["var"] + " = " + this.start + " TO " + this.end;
          } else {
            return "FOR " + this["var"] + " = " + this.start + " TO " + this.end + " STEP " + this.step;
          }
        };

        return For;

      })(Keyword),
      Goto: Goto = (function(_super) {
        __extends(Goto, _super);

        function Goto(lineno, $of) {
          this.lineno = lineno;
          this.of = util.flatten($of);
        }

        Goto.prototype["eval"] = function() {
          var $index;
          if (this.of.length > 0) {
            $index = valueOf(this.lineno) - 1;
            if (this.of[$index] != null) {
              pc = xrf[this.of[$index]];
            }
          } else {
            pc = xrf[parseInt(this.lineno, 10)];
          }
          return false;
        };

        Goto.prototype.toString = function() {
          if (this.of.length > (0 != null)) {
            return "GOTO " + this.lineno + " OF " + (this.of.join(','));
          } else {
            return "GOTO " + this.lineno;
          }
        };

        return Goto;

      })(Keyword),
      Gosub: Gosub = (function(_super) {
        __extends(Gosub, _super);

        function Gosub(lineno, $of) {
          this.lineno = lineno;
          this.of = util.flatten($of);
        }

        Gosub.prototype["eval"] = function() {
          stack.push({
            id: GOSUB,
            pc: pc
          });
          return Gosub.__super__["eval"].call(this);
        };

        Gosub.prototype.toString = function() {
          if (this.of.length > (0 != null)) {
            return "GOSUB " + this.lineno + " OF " + (this.of.join(','));
          } else {
            return "GOSUB " + this.lineno;
          }
        };

        return Gosub;

      })(Goto),
      If: If = (function(_super) {
        __extends(If, _super);

        function If(cond, then) {
          this.cond = cond;
          this.then = then;
        }

        If.prototype["eval"] = function() {
          if (this.cond["eval"]()) {
            if (this.then["eval"] != null) {
              this.then["eval"]();
            } else {
              pc = xrf[parseInt(this.then, 10)];
            }
          }
          return false;
        };

        If.prototype.toString = function() {
          return "IF " + this.cond + " THEN " + this.then;
        };

        return If;

      })(Keyword),
      Image: Image = (function(_super) {
        __extends(Image, _super);

        function Image($format) {
          if ($format == null) {
            $format = [];
          }
          this.source = util.flatten($format);
          this.format = format(this.source);
        }

        Image.prototype["eval"] = function() {
          return false;
        };

        Image.prototype.toString = function() {
          return "IMAGE " + (this.source.join(''));
        };

        return Image;

      })(Keyword),
      Input: Input = (function(_super) {
        __extends(Input, _super);

        function Input($vars, prompt) {
          this.prompt = prompt;
          this.vars = util.flatten($vars);
        }

        Input.prototype["eval"] = function() {
          con.input(this.prompt, this.vars);
          return true;
        };

        Input.prototype.toString = function() {
          if (this.prompt != null) {
            return "INPUT " + this.prompt + ", " + (this.vars.join(','));
          } else {
            return "INPUT " + (this.vars.join(','));
          }
        };

        return Input;

      })(Keyword),
      Let: Let = (function(_super) {
        __extends(Let, _super);

        function Let($vars, value) {
          var $var, _i, _len, _ref1;
          this.value = value;
          this.vars = [];
          _ref1 = util.flatten($vars);
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            $var = _ref1[_i];
            if ('string' === typeof $var) {
              this.vars.push(new Var($var));
            } else {
              this.vars.push($var);
            }
          }
        }

        Let.prototype["eval"] = function() {
          var $value, $var, _i, _len, _ref1;
          $value = valueOf(this.value);
          _ref1 = this.vars;
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            $var = _ref1[_i];
            $var["let"]($value);
          }
          return false;
        };

        Let.prototype.toString = function() {
          var $s, $var, _i, _len, _ref1;
          $s = '';
          _ref1 = this.vars;
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            $var = _ref1[_i];
            $s += $var + ' = ';
          }
          return "LET " + $s + this.value;
        };

        return Let;

      })(Keyword),
      Mat: Mat = (function(_super) {
        __extends(Mat, _super);

        function Mat(_var, value) {
          this["var"] = _var;
          this.value = value;
        }

        Mat.prototype["eval"] = function() {
          var $i, $j, $value;
          $value = this.value["eval"]();
          if (arrays[this["var"]] != null) {
            $i = arrays[this["var"]].length;
            $j = arrays[this["var"]][offset].length;
            arrays[this["var"]] = dim($value, $i, $j);
          } else {
            arrays[this["var"]] = dim($value, 10);
          }
          return false;
        };

        return Mat;

      })(Keyword),
      MatRead: MatRead = (function(_super) {
        __extends(MatRead, _super);

        function MatRead($vars) {
          this.vars = util.flatten($vars);
        }

        MatRead.prototype["eval"] = function() {
          var $var, _i, _len, _ref1;
          _ref1 = this.vars;
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            $var = _ref1[_i];
            if (dp < data.length) {
              $var["let"](data[dp++].value);
            } else {
              $var["let"](void 0);
            }
          }
          return false;
        };

        MatRead.prototype.toString = function() {
          return "MAT READ " + (this.vars.join(','));
        };

        return MatRead;

      })(Keyword),
      Next: Next = (function(_super) {
        __extends(Next, _super);

        function Next(_var) {
          this["var"] = _var;
        }

        Next.prototype["eval"] = function() {
          var $counter, $frame, $name, $step;
          $frame = stack[stack.length - 1];
          if ($frame.id !== FOR) {
            throw "Next without for";
          }
          $name = this["var"].name;
          if ($frame.name !== $name) {
            throw "Mismatched For/Next " + $name;
          }
          $step = valueOf($frame.step);
          $counter = this["var"]["eval"]() + $step;
          this["var"]["let"]($counter);
          if ($step < 0) {
            if ($counter < valueOf($frame.end)) {
              stack.pop();
            } else {
              pc = $frame.pc;
            }
          } else {
            if ($counter > valueOf($frame.end)) {
              stack.pop();
            } else {
              pc = $frame.pc;
            }
          }
          return false;
        };

        Next.prototype.toString = function() {
          return "NEXT " + this["var"];
        };

        return Next;

      })(Keyword),
      Print: Print = (function(_super) {
        __extends(Print, _super);

        function Print() {
          var $items;
          $items = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          this.items = util.flatten([$items]);
        }

        Print.prototype["eval"] = function() {
          var $item, $str, $val, _i, _len, _ref1;
          $str = '';
          _ref1 = this.items;
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            $item = _ref1[_i];
            $str += isNaN($val = valueOf($item)) ? $val : ' ' + $val;
          }
          if ($item === Semic || $item === Comma) {
            con.print($str);
          } else {
            con.println($str);
          }
          return false;
        };

        Print.prototype.toString = function() {
          var $item, $str, _i, _len, _ref1;
          $str = '';
          _ref1 = this.items;
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            $item = _ref1[_i];
            $str += $item.toString();
          }
          return "PRINT " + $str;
        };

        return Print;

      })(Keyword),
      Using: Using = (function(_super) {
        __extends(Using, _super);

        function Using() {
          var $items, lineno;
          lineno = arguments[0], $items = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
          this.lineno = lineno;
          this.items = util.flatten($items);
        }

        Using.prototype["eval"] = function() {
          var $args, $i, $item, $lineno, $statement, _i, _len, _ref1, _ref2;
          $i = xrf[this.lineno];
          _ref1 = prog[$i], $lineno = _ref1[0], $statement = _ref1[1];
          $args = [];
          _ref2 = this.items;
          for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
            $item = _ref2[_i];
            $args.push(valueOf($item));
          }
          if ($item === Semic || $item === Comma) {
            con.print(util.sprintf($statement.code.format, $args));
          } else {
            con.println(util.sprintf($statement.code.format, $args));
          }
          return false;
        };

        Using.prototype.toString = function() {
          var $item, $str, _i, _len, _ref1;
          if (this.items.length === 0) {
            return "PRINT USING " + this.lineno;
          } else {
            $str = '';
            _ref1 = this.items;
            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
              $item = _ref1[_i];
              $str += $item.toString() + ',';
            }
            $str = $str.slice(0, -1);
            return "PRINT USING " + this.lineno + ";" + $str;
          }
        };

        return Using;

      })(Keyword),
      Randomize: Randomize = (function(_super) {
        __extends(Randomize, _super);

        function Randomize() {}

        Randomize.prototype["eval"] = function() {
          return false;
        };

        Randomize.prototype.toString = function() {
          return "RANDOMIZE";
        };

        return Randomize;

      })(Keyword),
      Read: Read = (function(_super) {
        __extends(Read, _super);

        function Read($vars) {
          this.vars = util.flatten($vars);
        }

        Read.prototype["eval"] = function() {
          var $var, _i, _len, _ref1;
          _ref1 = this.vars;
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            $var = _ref1[_i];
            if (dp < data.length) {
              $var["let"](data[dp++].value);
            } else {
              $var["let"](void 0);
            }
          }
          return false;
        };

        Read.prototype.toString = function() {
          return "READ " + (this.vars.join(','));
        };

        return Read;

      })(Keyword),
      Restore: Restore = (function(_super) {
        __extends(Restore, _super);

        function Restore(lineno) {
          this.lineno = lineno;
        }

        Restore.prototype["eval"] = function() {
          dp = 0;
          return false;
        };

        Restore.prototype.toString = function() {
          if (this.lineno != null) {
            return "RESTORE " + this.lineno;
          } else {
            return "RESTORE";
          }
        };

        return Restore;

      })(Keyword),
      Return: Return = (function(_super) {
        __extends(Return, _super);

        function Return() {}

        Return.prototype["eval"] = function() {
          var $frame;
          $frame = stack.pop();
          while ($frame.id !== GOSUB) {
            $frame = stack.pop();
          }
          pc = $frame.pc;
          return false;
        };

        Return.prototype.toString = function() {
          return "RETURN";
        };

        return Return;

      })(Keyword),
      Rem: Rem = (function(_super) {
        __extends(Rem, _super);

        function Rem($text) {
          this.text = $text.replace(/^REM/i, '');
        }

        Rem.prototype["eval"] = function() {
          return false;
        };

        Rem.prototype.toString = function() {
          return "REM" + this.text;
        };

        return Rem;

      })(Keyword),
      Stop: Stop = (function(_super) {
        __extends(Stop, _super);

        function Stop() {}

        Stop.prototype["eval"] = function() {
          eop = true;
          return false;
        };

        Stop.prototype.toString = function() {
          return "STOP";
        };

        return Stop;

      })(Keyword),
      Max: Max = (function(_super) {
        __extends(Max, _super);

        function Max() {
          _ref1 = Max.__super__.constructor.apply(this, arguments);
          return _ref1;
        }

        Max.prototype["eval"] = function() {
          return Math.max(valueOf(this.left), valueOf(this.right));
        };

        Max.prototype.toString = function() {
          return "" + this.left + " MAX " + this.right;
        };

        return Max;

      })(Operator),
      Min: Min = (function(_super) {
        __extends(Min, _super);

        function Min() {
          _ref2 = Min.__super__.constructor.apply(this, arguments);
          return _ref2;
        }

        Min.prototype["eval"] = function() {
          return Math.min(valueOf(this.left), valueOf(this.right));
        };

        Min.prototype.toString = function() {
          return "" + this.left + " MIN " + this.right;
        };

        return Min;

      })(Operator),
      Add: Add = (function(_super) {
        __extends(Add, _super);

        function Add() {
          _ref3 = Add.__super__.constructor.apply(this, arguments);
          return _ref3;
        }

        Add.prototype["eval"] = function() {
          return valueOf(this.left) + valueOf(this.right);
        };

        Add.prototype.toString = function() {
          return "" + this.left + " + " + this.right;
        };

        return Add;

      })(Operator),
      Sub: Sub = (function(_super) {
        __extends(Sub, _super);

        function Sub() {
          _ref4 = Sub.__super__.constructor.apply(this, arguments);
          return _ref4;
        }

        Sub.prototype["eval"] = function() {
          return valueOf(this.left) - valueOf(this.right);
        };

        Sub.prototype.toString = function() {
          return "" + this.left + " - " + this.right;
        };

        return Sub;

      })(Operator),
      Mul: Mul = (function(_super) {
        __extends(Mul, _super);

        function Mul() {
          _ref5 = Mul.__super__.constructor.apply(this, arguments);
          return _ref5;
        }

        Mul.prototype["eval"] = function() {
          return valueOf(this.left) * valueOf(this.right);
        };

        Mul.prototype.toString = function() {
          return "" + this.left + " * " + this.right;
        };

        return Mul;

      })(Operator),
      Div: Div = (function(_super) {
        __extends(Div, _super);

        function Div() {
          _ref6 = Div.__super__.constructor.apply(this, arguments);
          return _ref6;
        }

        Div.prototype["eval"] = function() {
          return valueOf(this.left) / valueOf(this.right);
        };

        Div.prototype.toString = function() {
          return "" + this.left + " / " + this.right;
        };

        return Div;

      })(Operator),
      Pow: Pow = (function(_super) {
        __extends(Pow, _super);

        function Pow() {
          _ref7 = Pow.__super__.constructor.apply(this, arguments);
          return _ref7;
        }

        Pow.prototype["eval"] = function() {
          return Math.pow(valueOf(this.left), valueOf(this.right));
        };

        Pow.prototype.toString = function() {
          return "" + this.left + " ^ " + this.right;
        };

        return Pow;

      })(Operator),
      OR: OR = (function(_super) {
        __extends(OR, _super);

        function OR() {
          _ref8 = OR.__super__.constructor.apply(this, arguments);
          return _ref8;
        }

        OR.prototype["eval"] = function() {
          return valueOf(this.left) || valueOf(this.right);
        };

        OR.prototype.toString = function() {
          return "" + this.left + " OR " + this.right;
        };

        return OR;

      })(Operator),
      AND: AND = (function(_super) {
        __extends(AND, _super);

        function AND() {
          _ref9 = AND.__super__.constructor.apply(this, arguments);
          return _ref9;
        }

        AND.prototype["eval"] = function() {
          return valueOf(this.left) && valueOf(this.right);
        };

        AND.prototype.toString = function() {
          return "" + this.left + " AND " + this.right;
        };

        return AND;

      })(Operator),
      NOT: NOT = (function(_super) {
        __extends(NOT, _super);

        function NOT() {
          _ref10 = NOT.__super__.constructor.apply(this, arguments);
          return _ref10;
        }

        NOT.prototype["eval"] = function() {
          return !valueOf(this.left);
        };

        NOT.prototype.toString = function() {
          return "NOT " + this.left;
        };

        return NOT;

      })(Operator),
      LT: LT = (function(_super) {
        __extends(LT, _super);

        function LT() {
          _ref11 = LT.__super__.constructor.apply(this, arguments);
          return _ref11;
        }

        LT.prototype["eval"] = function() {
          return valueOf(this.left) < valueOf(this.right);
        };

        LT.prototype.toString = function() {
          return "" + this.left + " < " + this.right;
        };

        return LT;

      })(Operator),
      GT: GT = (function(_super) {
        __extends(GT, _super);

        function GT() {
          _ref12 = GT.__super__.constructor.apply(this, arguments);
          return _ref12;
        }

        GT.prototype["eval"] = function() {
          return valueOf(this.left) > valueOf(this.right);
        };

        GT.prototype.toString = function() {
          return "" + this.left + " > " + this.right;
        };

        return GT;

      })(Operator),
      LE: LE = (function(_super) {
        __extends(LE, _super);

        function LE() {
          _ref13 = LE.__super__.constructor.apply(this, arguments);
          return _ref13;
        }

        LE.prototype["eval"] = function() {
          return valueOf(this.left) <= valueOf(this.right);
        };

        LE.prototype.toString = function() {
          return "" + this.left + " <= " + this.right;
        };

        return LE;

      })(Operator),
      GE: GE = (function(_super) {
        __extends(GE, _super);

        function GE() {
          _ref14 = GE.__super__.constructor.apply(this, arguments);
          return _ref14;
        }

        GE.prototype["eval"] = function() {
          return valueOf(this.left) >= valueOf(this.right);
        };

        GE.prototype.toString = function() {
          return "" + this.left + " >= " + this.right;
        };

        return GE;

      })(Operator),
      EQ: EQ = (function(_super) {
        __extends(EQ, _super);

        function EQ() {
          _ref15 = EQ.__super__.constructor.apply(this, arguments);
          return _ref15;
        }

        EQ.prototype["eval"] = function() {
          if (valueOf(this.left) === valueOf(this.right)) {
            return true;
          } else {
            return false;
          }
        };

        EQ.prototype.toString = function() {
          return "" + this.left + " = " + this.right;
        };

        return EQ;

      })(Operator),
      NE: NE = (function(_super) {
        __extends(NE, _super);

        function NE() {
          _ref16 = NE.__super__.constructor.apply(this, arguments);
          return _ref16;
        }

        NE.prototype["eval"] = function() {
          if (valueOf(this.left) !== valueOf(this.right)) {
            return true;
          } else {
            return false;
          }
        };

        NE.prototype.toString = function() {
          return "" + this.left + " <> " + this.right;
        };

        return NE;

      })(Operator),
      FN: FN = (function() {
        function FN(name, parm) {
          this.name = name;
          this.parm = parm;
        }

        FN.prototype["eval"] = function() {
          return functions[this.name](valueOf(this.parm));
        };

        FN.prototype.toString = function() {
          return "" + this.name + "(" + this.parm + ")";
        };

        return FN;

      })(),
      ABS: ABS = (function(_super) {
        __extends(ABS, _super);

        function ABS() {
          _ref17 = ABS.__super__.constructor.apply(this, arguments);
          return _ref17;
        }

        ABS.prototype["eval"] = function() {
          return Math.abs(valueOf(this.$0));
        };

        return ABS;

      })(BuiltIn),
      ATN: ATN = (function(_super) {
        __extends(ATN, _super);

        function ATN() {
          _ref18 = ATN.__super__.constructor.apply(this, arguments);
          return _ref18;
        }

        ATN.prototype["eval"] = function() {
          return Math.atan(valueOf(this.$0));
        };

        return ATN;

      })(BuiltIn),
      COS: COS = (function(_super) {
        __extends(COS, _super);

        function COS() {
          _ref19 = COS.__super__.constructor.apply(this, arguments);
          return _ref19;
        }

        COS.prototype["eval"] = function() {
          return Math.cos(valueOf(this.$0));
        };

        return COS;

      })(BuiltIn),
      EXP: EXP = (function(_super) {
        __extends(EXP, _super);

        function EXP() {
          _ref20 = EXP.__super__.constructor.apply(this, arguments);
          return _ref20;
        }

        EXP.prototype["eval"] = function() {
          return Math.exp(valueOf(this.$0));
        };

        return EXP;

      })(BuiltIn),
      INT: INT = (function(_super) {
        __extends(INT, _super);

        function INT() {
          _ref21 = INT.__super__.constructor.apply(this, arguments);
          return _ref21;
        }

        INT.prototype["eval"] = function() {
          return Math.floor(valueOf(this.$0));
        };

        return INT;

      })(BuiltIn),
      LEN: LEN = (function(_super) {
        __extends(LEN, _super);

        function LEN() {
          _ref22 = LEN.__super__.constructor.apply(this, arguments);
          return _ref22;
        }

        LEN.prototype["eval"] = function() {
          return valueOf(this.$0).length;
        };

        return LEN;

      })(BuiltIn),
      LIN: LIN = (function(_super) {
        __extends(LIN, _super);

        function LIN() {
          _ref23 = LIN.__super__.constructor.apply(this, arguments);
          return _ref23;
        }

        LIN.prototype["eval"] = function() {
          return Array(Math.abs(valueOf(this.$0)) + 1).join('\n');
        };

        return LIN;

      })(BuiltIn),
      LOG: LOG = (function(_super) {
        __extends(LOG, _super);

        function LOG() {
          _ref24 = LOG.__super__.constructor.apply(this, arguments);
          return _ref24;
        }

        LOG.prototype["eval"] = function() {
          return Math.log(valueOf(this.$0));
        };

        return LOG;

      })(BuiltIn),
      RND: RND = (function(_super) {
        __extends(RND, _super);

        function RND() {
          _ref25 = RND.__super__.constructor.apply(this, arguments);
          return _ref25;
        }

        RND.prototype["eval"] = function() {
          return Math.random();
        };

        return RND;

      })(BuiltIn),
      SGN: SGN = (function(_super) {
        __extends(SGN, _super);

        function SGN() {
          _ref26 = SGN.__super__.constructor.apply(this, arguments);
          return _ref26;
        }

        SGN.prototype["eval"] = function() {
          var $0;
          $0 = valueOf(this.$0);
          if ($0 < 0) {
            return -1;
          } else if ($0 > 0) {
            return 1;
          } else {
            return 0;
          }
        };

        return SGN;

      })(BuiltIn),
      SIN: SIN = (function(_super) {
        __extends(SIN, _super);

        function SIN() {
          _ref27 = SIN.__super__.constructor.apply(this, arguments);
          return _ref27;
        }

        SIN.prototype["eval"] = function() {
          return Math.sin(valueOf(this.$0));
        };

        return SIN;

      })(BuiltIn),
      SPA: SPA = (function(_super) {
        __extends(SPA, _super);

        function SPA() {
          _ref28 = SPA.__super__.constructor.apply(this, arguments);
          return _ref28;
        }

        SPA.prototype["eval"] = function() {
          return Array(valueOf(this.$0)).join(" ");
        };

        return SPA;

      })(BuiltIn),
      SQR: SQR = (function(_super) {
        __extends(SQR, _super);

        function SQR() {
          _ref29 = SQR.__super__.constructor.apply(this, arguments);
          return _ref29;
        }

        SQR.prototype["eval"] = function() {
          return Math.sqrt(valueOf(this.$0));
        };

        return SQR;

      })(BuiltIn),
      TAB: TAB = (function(_super) {
        __extends(TAB, _super);

        function TAB() {
          _ref30 = TAB.__super__.constructor.apply(this, arguments);
          return _ref30;
        }

        TAB.prototype["eval"] = function() {
          return Array(Math.floor(valueOf(this.$0))).join(" ");
        };

        return TAB;

      })(BuiltIn),
      TAN: TAN = (function(_super) {
        __extends(TAN, _super);

        function TAN() {
          _ref31 = TAN.__super__.constructor.apply(this, arguments);
          return _ref31;
        }

        TAN.prototype["eval"] = function() {
          return Math.tan(valueOf(this.$0));
        };

        return TAN;

      })(BuiltIn),
      TIM: TIM = (function(_super) {
        __extends(TIM, _super);

        function TIM() {
          _ref32 = TIM.__super__.constructor.apply(this, arguments);
          return _ref32;
        }

        TIM.prototype["eval"] = function() {
          if (valueOf(this.$0) === 0) {
            return (new Date()).getMinutes();
          } else {
            return (new Date()).getSeconds();
          }
        };

        return TIM;

      })(BuiltIn),
      LCASE: LCASE = (function(_super) {
        __extends(LCASE, _super);

        function LCASE() {
          _ref33 = LCASE.__super__.constructor.apply(this, arguments);
          return _ref33;
        }

        LCASE.prototype["eval"] = function() {
          return valueOf(this.$0).toLowerCase();
        };

        LCASE.prototype.toString = function() {
          return "LCASE(" + this.$0 + ", " + this.$1 + ", " + this.$2 + ")";
        };

        return LCASE;

      })(BuiltIn),
      LEFT: LEFT = (function(_super) {
        __extends(LEFT, _super);

        function LEFT() {
          _ref34 = LEFT.__super__.constructor.apply(this, arguments);
          return _ref34;
        }

        LEFT.prototype["eval"] = function() {
          return valueOf(this.$0).substr(0, valueOf(this.$1) - 1);
        };

        LEFT.prototype.toString = function() {
          return "LEFT(" + this.$0 + ", " + this.$1 + ", " + this.$2 + ")";
        };

        return LEFT;

      })(BuiltIn),
      MID: MID = (function(_super) {
        __extends(MID, _super);

        function MID() {
          _ref35 = MID.__super__.constructor.apply(this, arguments);
          return _ref35;
        }

        MID.prototype["eval"] = function() {
          return valueOf(this.$0).substring(valueOf(this.$1), valueOf(this.$2));
        };

        MID.prototype.toString = function() {
          return "MID(" + this.$0 + ", " + this.$1 + ", " + this.$2 + ")";
        };

        return MID;

      })(BuiltIn),
      RIGHT: RIGHT = (function(_super) {
        __extends(RIGHT, _super);

        function RIGHT() {
          _ref36 = RIGHT.__super__.constructor.apply(this, arguments);
          return _ref36;
        }

        RIGHT.prototype["eval"] = function() {
          return valueOf(this.$0).substr(valueOf(this.$1) - 1);
        };

        RIGHT.prototype.toString = function() {
          return "RIGHT(" + this.$0 + ", " + this.$1 + ", " + this.$2 + ")";
        };

        return RIGHT;

      })(BuiltIn),
      SUBSTR: SUBSTR = (function(_super) {
        __extends(SUBSTR, _super);

        function SUBSTR() {
          _ref37 = SUBSTR.__super__.constructor.apply(this, arguments);
          return _ref37;
        }

        SUBSTR.prototype["eval"] = function() {
          return valueOf(this.$0).substr(valueOf(this.$1) - 1, valueOf(this.$2));
        };

        SUBSTR.prototype.toString = function() {
          return "SUBSTR(" + this.$0 + ", " + this.$1 + ", " + this.$2 + ")";
        };

        return SUBSTR;

      })(BuiltIn),
      UCASE: UCASE = (function(_super) {
        __extends(UCASE, _super);

        function UCASE() {
          _ref38 = UCASE.__super__.constructor.apply(this, arguments);
          return _ref38;
        }

        UCASE.prototype["eval"] = function() {
          return valueOf(this.$0).toUpperCase();
        };

        UCASE.prototype.toString = function() {
          return "UCASE(" + this.$0 + ", " + this.$1 + ", " + this.$2 + ")";
        };

        return UCASE;

      })(BuiltIn)
    }
  };

  if (typeof window !== "undefined" && window !== null) {
    window.katra = katra;
  } else {
    module.exports = katra;
  }

}).call(this);
