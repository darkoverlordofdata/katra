// Generated by CoffeeScript 1.6.3
(function() {
  (function($, window, document) {
    var Console;
    $.prototype.console = function($options) {
      var _ref;
      if ($options == null) {
        $options = {};
      }
      return (_ref = $.data(this, 'console')) != null ? _ref : $.data(this, 'console', new Console(this, $options));
    };
    return Console = (function() {
      var KEY_BS, KEY_C, KEY_CR, KEY_DOWN, KEY_ESC, KEY_R, KEY_S, KEY_TAB, KEY_UP, fix;

      KEY_BS = 8;

      KEY_TAB = 9;

      KEY_CR = 13;

      KEY_ESC = 27;

      KEY_UP = 38;

      KEY_DOWN = 40;

      KEY_C = 67;

      KEY_R = 82;

      KEY_S = 83;

      fix = function($text) {
        return $text.replace(/\ /g, "&nbsp;").replace(/\n/g, "<br />");
      };

      Console.prototype.histpos = 0;

      Console.prototype.history = null;

      Console.prototype.kb = null;

      Console.prototype.output = null;

      Console.prototype.prompt = null;

      Console.prototype["default"] = {
        autofocus: true,
        history: true,
        welcome: '',
        prompt: '> ',
        promptAlt: '? ',
        commandHandle: function() {},
        cancelHandle: function() {}
      };

      function Console($container, $options) {
        var $this,
          _this = this;
        $this = this;
        this.history = [];
        this.options = $options = $.extend(this["default"], $options);
        $container.html("<span class=\"output\"></span>\n<span class=\"enter\">\n<span class=\"prompt\"></span><span contenteditable class=\"input\"></span>\n</span>");
        this.output = $container.find('.output');
        this.prompt = $container.find('span .prompt');
        this.kb = $container.find('span .input');
        if ($options.autofocus) {
          this.kb.focus();
        }
        this.prompt.text($options.prompt);
        this.print("<div>" + $options.welcomeMessage + "</div>");
        $(window).on('click', function($e) {
          return _this.kb.focus();
        });
        $(document.body).on('keydown', function($e) {
          if ($e.keyCode === KEY_ESC) {
            $e.stopPropagation();
            return $e.preventDefault();
          }
        });
        this.kb.on('click', function($e) {
          return _this.kb.text(_this.kb.text());
        });
        this.kb.on('keyup', function($e) {
          var $temp;
          if (!$options.history) {
            return;
          }
          $temp = 0;
          if (_this.history.length) {
            if ($e.keyCode === KEY_UP || $e.keyCode === KEY_DOWN) {
              if (_this.history[_this.histpos]) {
                _this.history[_this.histpos] = _this.kb.text();
              } else {
                $temp = _this.kb.text();
              }
            }
            if ($e.keyCode === KEY_UP) {
              _this.histpos--;
              if (_this.histpos < 0) {
                _this.histpos = 0;
              }
            } else if ($e.keyCode === KEY_DOWN) {
              _this.histpos++;
              if (_this.histpos > _this.history.length) {
                _this.histpos = _this.history.length;
              }
            }
            if ($e.keyCode === KEY_UP || $e.keyCode === KEY_DOWN) {
              _this.kb.text(_this.history[_this.histpos] ? _this.history[_this.histpos] : $temp);
              return _this.kb.text(_this.kb.text());
            }
          }
        });
        this.kb.on('keydown', function($e) {
          if ($e.ctrlKey || $e.metaKey) {
            switch ($e.keyCode) {
              case KEY_C:
                $options.cancelHandle();
                $e.preventDefault();
                return $e.stopPropagation();
              case KEY_R:
                _this.clear();
                $e.preventDefault();
                return $e.stopPropagation();
              case KEY_S:
                $container.toggleClass('flicker');
                $e.preventDefault();
                return $e.stopPropagation();
            }
          }
        });
        this.kb.on('keydown', function($e) {
          switch ($e.keyCode) {
            case KEY_BS:
              if (!_this.kb.text()) {

              }
              break;
            case KEY_TAB:
              return $e.preventDefault;
            case KEY_CR:
              if (_this.kb.text()) {
                _this.history[_this.history.length] = _this.kb.text();
                _this.histpos = _this.history.length;
              }
              _this.output.append(_this.kb.text() + "<br />");
              _this.kb.get(0).scrollIntoView();
              if (_this.kb.text() && _this.kb.text().trim()) {
                $options.commandHandle(_this.kb.text());
              }
              return _this.kb.text('');
          }
        });
      }

      Console.prototype.clear = function() {
        return this.output.html('');
      };

      Console.prototype.setPrompt = function($prompt) {
        if ($prompt == null) {
          $prompt = false;
        }
        return this.prompt.text($prompt ? this.options.promptAlt : this.options.prompt);
      };

      Console.prototype.print = function($text) {
        if ($text == null) {
          $text = '';
        }
        this.output.append(fix($text));
        return this.kb.get(0).scrollIntoView();
      };

      Console.prototype.println = function($text) {
        if ($text == null) {
          $text = '';
        }
        this.output.append(fix("" + $text + "\n"));
        return this.kb.get(0).scrollIntoView();
      };

      Console.prototype.debug = function($text) {
        this.output.append("<span style=\"color: blue;\">" + fix("" + $text + "\n") + "</span>");
        return this.kb.get(0).scrollIntoView();
      };

      Console.prototype.highlight = function($text) {
        this.output.append("<span style=\"color: yellow;\">" + fix("" + $text + "\n") + "</span>");
        return this.kb.get(0).scrollIntoView();
      };

      return Console;

    })();
  })(jQuery, window, document);

}).call(this);
